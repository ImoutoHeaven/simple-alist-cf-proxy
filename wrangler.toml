name = "simple-alist-cf-proxy"
main = "dist/worker.js"
compatibility_date = "2024-01-01"

# Environment variables (configure these in Cloudflare Dashboard or use secrets)
# [vars]
# ADDRESS = "https://your-alist-server.com"
# TOKEN = "your-hmac-token"
# WORKER_ADDRESS = "https://your-worker.workers.dev"
# VERIFY_HEADER = ""
# VERIFY_SECRET = ""
# # ⚠️ NEW: Multi-Authentication Header Support (comma-separated format)
# # You can now specify multiple authentication header/secret pairs for different services
# # Format: "header1,header2,header3"
# # Example for AList + PostgREST:
# #   VERIFY_HEADER = "X-Auth-Token,X-Postgrest-Auth"
# #   VERIFY_SECRET = "alist-secret-key,postgrest-secret-key"
# # Requirements:
# #   - Both arrays must have the same length (if non-empty)
# #   - No spaces between commas: "header1,header2" (spaces will be trimmed automatically)
# #   - All header/secret pairs will be sent in requests to AList API and PostgREST
# # Backward Compatible: Single value still works: VERIFY_HEADER = "X-Auth-Token"
# SIGN_CHECK = "true"
# HASH_CHECK = "true"
# WORKER_CHECK = "true"
# IP_CHECK = "true"
# ADDITION_CHECK = "true"             # Require additionalInfo and additionalInfoSign, validate signature/path binding
# ADDITION_EXPIRETIME_CHECK = "true"  # Validate expireTime field (only when ADDITION_CHECK is true)
# IPV4_ONLY = "true"
# BLACKLIST_PREFIX = "/private,/admin"
# BLACKLIST_ACTION = "block"
# WHITELIST_PREFIX = "/public"
# WHITELIST_ACTION = "skip-ip"
# EXCEPT_PREFIX = "/api,/system"
# EXCEPT_ACTION = "block-except"
#
# # ═══════════════════════════════════════════════════════════════
# # Path Filtering System - Priority & Action Reference
# # ═══════════════════════════════════════════════════════════════
# #
# # Priority Order (evaluated in this sequence):
# # 1. BLACKLIST (highest priority) - matches prefix → apply actions
# # 2. WHITELIST (second priority) - matches prefix → apply actions
# # 3. EXCEPT (third priority) - does NOT match prefix → apply actions (inverse logic)
# # 4. Default - no match → use global *_CHECK settings
# #
# # Available Actions (comma-separated, multiple allowed except for block/asis):
# # ┌─────────────────┬──────────────────────────────────────────────────────┐
# # │ Action          │ Description                                          │
# # ├─────────────────┼──────────────────────────────────────────────────────┤
# # │ block           │ Deny access (403). Cannot combine with other actions │
# # │ skip-sign       │ Skip sign parameter verification                     │
# # │ skip-hash       │ Skip hashSign parameter verification                 │
# # │ skip-worker     │ Skip workerSign parameter verification               │
# # │ skip-ip         │ Skip ipSign parameter verification                   │
# # │ asis            │ Keep original behavior. Cannot combine with others   │
# # └─────────────────┴──────────────────────────────────────────────────────┘
# #
# # Except Actions (must use -except suffix, inverse matching):
# # ┌─────────────────┬──────────────────────────────────────────────────────┐
# # │ Action          │ Description                                          │
# # ├─────────────────┼──────────────────────────────────────────────────────┤
# # │ block-except    │ Block paths NOT in EXCEPT_PREFIX                     │
# # │ skip-sign-except│ Skip sign check for paths NOT in EXCEPT_PREFIX       │
# # │ skip-hash-except│ Skip hash check for paths NOT in EXCEPT_PREFIX       │
# # │ skip-worker-except│ Skip worker check for paths NOT in EXCEPT_PREFIX   │
# # │ skip-ip-except  │ Skip IP check for paths NOT in EXCEPT_PREFIX         │
# # │ asis-except     │ Use original behavior for paths NOT in EXCEPT_PREFIX │
# # └─────────────────┴──────────────────────────────────────────────────────┘
# #
# # Examples:
# #
# # Example 1: Block private paths, allow public with reduced verification
# #   BLACKLIST_PREFIX = "/private,/admin"
# #   BLACKLIST_ACTION = "block"
# #   WHITELIST_PREFIX = "/public"
# #   WHITELIST_ACTION = "skip-ip,skip-worker"
# #
# # Example 2: Only allow specific paths, block everything else
# #   EXCEPT_PREFIX = "/allowed,/safe"
# #   EXCEPT_ACTION = "block-except"
# #   # Paths matching /allowed or /safe → normal checks
# #   # All other paths → blocked (403)
# #
# # Example 3: Skip IP check for all except sensitive paths
# #   EXCEPT_PREFIX = "/sensitive,/private"
# #   EXCEPT_ACTION = "skip-ip-except"
# #   # Paths matching /sensitive or /private → IP check enabled
# #   # All other paths → IP check skipped
# #
# # Example 4: Complex multi-level filtering
# #   BLACKLIST_PREFIX = "/blocked"
# #   BLACKLIST_ACTION = "block"
# #   WHITELIST_PREFIX = "/media"
# #   WHITELIST_ACTION = "skip-sign,skip-hash"
# #   EXCEPT_PREFIX = "/api,/system"
# #   EXCEPT_ACTION = "asis-except"
# #   # Priority: /blocked → 403
# #   #          /media → skip sign+hash checks
# #   #          All except /api,/system → use original *_CHECK settings
# #          /api,/system → default behavior

#
# # Database Mode for Download Link Cache
# # Options: "d1" (Cloudflare D1 Binding), "d1-rest" (Cloudflare D1 REST API), "custom-pg-rest" (Custom PostgreSQL + PostgREST)
# # If not set, caching is completely disabled (always call AList API)
# DB_MODE = ""
# DOWNLOAD_CACHE_TABLE = "DOWNLOAD_CACHE_TABLE"
# THROTTLE_PROTECTION_TABLE = "THROTTLE_PROTECTION"
# DOWNLOAD_IP_RATELIMIT_TABLE = "DOWNLOAD_IP_RATELIMIT_TABLE"
#
# # Link Cache TTL - how long to cache download links before re-fetching from AList
# # Format: {number}{unit} where unit is h (hour), m (minute), s (second)
# # Examples: "30m", "1h", "120s"
# # Default: "30m" (1800 seconds)
# LINK_TTL = "30m"
#
# # Cleanup Percentage - probability of triggering cache cleanup per request
# # Range: 0-100 (supports decimals, e.g., "0.1" = 0.1% chance)
# # Default: "1" (1% chance per request)
# # Cleanup removes records older than LINK_TTL * 2
# CLEANUP_PERCENTAGE = "1"
#
# # D1 (Cloudflare D1 Binding) Download Cache - requires DB_MODE="d1"
# # Note: You must also configure d1_databases binding below
# D1_DATABASE_BINDING = "DB"  # Optional, defaults to "DB"
#
# # D1 REST API Download Cache - requires DB_MODE="d1-rest"
# # Use this mode when you cannot use Workers binding (e.g., external API calls)
# D1_ACCOUNT_ID = "your-cloudflare-account-id"
# D1_DATABASE_ID = "your-d1-database-id"
# D1_API_TOKEN = "your-cloudflare-api-token"
#
# # Custom PostgreSQL + PostgREST Download Cache - requires DB_MODE="custom-pg-rest"
# # Use this mode when you have self-hosted PostgreSQL with PostgREST REST API
# # ⚠️ IMPORTANT: You MUST run init.sql on your PostgreSQL database first!
# #   - Creates required tables & stored procedures (see init.sql)
# POSTGREST_URL = "https://your-domain.com/postgrest"  # PostgREST API endpoint (without table name)
# # Note: VERIFY_HEADER and VERIFY_SECRET (already defined above) are used for PostgREST authentication
#
#
# # ═══════════════════════════════════════════════════════════════
# # Throttle Protection System - Prevent Repeated Requests to Failing Hostnames
# # ═══════════════════════════════════════════════════════════════
# #
# # Purpose: Protect against repeated requests to hostnames that are returning errors
# # (e.g., OneDrive throttling with 429, Google Drive service errors with 503)
# #
# # How it works:
# # 1. When a download URL returns 4xx/5xx, the hostname is marked as "protected"
# # 2. Subsequent requests to that hostname will return the cached error without fetching
# # 3. After the time window expires, requests resume normally
# # 4. If successful, protection is cleared automatically
# #
# # Requirements:
# # - DB_MODE must be set (d1, d1-rest, or custom-pg-rest)
# # - For custom-pg-rest: Run init.sql to create THROTTLE_PROTECTION table and stored procedures
# #
# # Configuration:
# THROTTLE_PROTECT_HOSTNAME = ""  # Comma-separated hostname patterns to protect
#                                  # Examples: "*.sharepoint.com,*.googleapis.com"
#                                  #   - "*.sharepoint.com" matches both "xxx.sharepoint.com" and "sharepoint.com"
#                                  #   - "example.com" matches only "example.com"
#                                  # Default: "" (disabled - no protection)
#
# THROTTLE_TIME_WINDOW = "60s"    # Time window for protection (format: {number}{unit})
#                                  # Units: s (seconds), m (minutes), h (hours)
#                                  # Examples: "30s", "5m", "1h"
#                                  # Default: "60s"
#                                  # After this time, requests will resume to check if service recovered
#
# THROTTLE_PROTECT_HTTP_CODE = "429,500,503"  # Status codes that trigger protection (comma-separated)
#                                             # Provide only the codes that should cause throttle protect writes
#                                             # Example: "500" or "429,500,503"
#                                             # Default: "429,500,503"

# # ═══════════════════════════════════════════════════════════════
# # IP Subnet Rate Limiting (database-backed)
# # ═══════════════════════════════════════════════════════════════
# #
# # WINDOW_TIME = "24h"                  # Counting window per subnet
# # IPSUBNET_WINDOWTIME_LIMIT = "100"    # Max requests per subnet within WINDOW_TIME
# # IPV4_SUFFIX = "/32"                  # IPv4 subnet mask applied before hashing
# # IPV6_SUFFIX = "/60"                  # IPv6 subnet mask applied before hashing
# # BLOCK_TIME = "10m"                   # Additional block duration after hitting the limit
# # PG_ERROR_HANDLE = "fail-closed"      # Use "fail-open" to bypass DB errors gracefully

# # ═══════════════════════════════════════════════════════════════
# # Bandwidth Quota (Enhanced)
# # ═══════════════════════════════════════════════════════════════
# #
# # Purpose: Limit download bandwidth per IP range and per file
# # Tracks real download bytes (not just request counts)
# #
# # Requirements: Requires DB_MODE to be set (d1, d1-rest, or custom-pg-rest)
# #
# # Configuration:
# QUOTA_LIMIT_TOTAL_ENABLED = "false"                # Enable total bandwidth quota (default: false)
# QUOTA_LIMIT_FILEPATH_ENABLED = "false"             # Enable per-file bandwidth quota (default: false)
#
# # Total Bandwidth Limit (per IP range)
# IPSUBNET_BANDWIDTH_LIMIT = "10GB"                  # Supports KB/MB/GB/TB units (default: "10GB")
#                                                     # Examples: "500MB", "1.5TB", "100GB"
#
# # Per-File Bandwidth Limit (per IP range + filepath)
# IPSUBNET_FILEPATH_BANDWIDTH_LIMIT = "2.2x"         # Dynamic quota: filesize * multiplier (default: "2.2x")
#                                                     # Examples: "2x", "1.5x", "3x"
#                                                     # Or static: "1GB", "500MB"
#                                                     # Dynamic requires filesize in additionalInfo
#
# # Time Windows
# BANDWIDTH_WINDOW_TIME_TOTAL = "4h"                 # Total quota window (default: "4h")
#                                                     # Supports: d (days), h (hours), m (minutes), s (seconds)
# BANDWIDTH_WINDOW_TIME_FILEPATH = "4h"              # Per-file quota window (default: "4h")
#
# # Block Duration
# BANDWIDTH_BLOCK_TIME = "10m"                       # Block duration after exceeding quota (default: "10m")
#
# # Table Names (optional)
# BANDWIDTH_IPRANGE_TABLE = "IPRANGE_BANDWIDTH_QUOTA_TABLE"           # IP range quota table
# BANDWIDTH_FILEPATH_TABLE = "IPRANGE_FILEPATH_BANDWIDTH_QUOTA_TABLE" # Filepath quota table
#
# # Example Use Cases:
# #
# # 1. Prevent bandwidth abuse (10GB per IP per day):
# #    QUOTA_LIMIT_TOTAL_ENABLED = "true"
# #    IPSUBNET_BANDWIDTH_LIMIT = "10GB"
# #    BANDWIDTH_WINDOW_TIME_TOTAL = "1d"
# #
# # 2. Per-file limits (allow 2x filesize download):
# #    QUOTA_LIMIT_FILEPATH_ENABLED = "true"
# #    IPSUBNET_FILEPATH_BANDWIDTH_LIMIT = "2x"
# #    BANDWIDTH_WINDOW_TIME_FILEPATH = "4h"
# #
# # 3. Combined limits:
# #    QUOTA_LIMIT_TOTAL_ENABLED = "true"
# #    QUOTA_LIMIT_FILEPATH_ENABLED = "true"
# #    IPSUBNET_BANDWIDTH_LIMIT = "50GB"
# #    IPSUBNET_FILEPATH_BANDWIDTH_LIMIT = "2.5x"
# #    BANDWIDTH_WINDOW_TIME_TOTAL = "1d"
# #    BANDWIDTH_WINDOW_TIME_FILEPATH = "6h"

# # ═══════════════════════════════════════════════════════════════
# # ⚠️ NEW: Cloudflare Rate Limiter (Binding-based, Stateless/Stateful)
# # ═══════════════════════════════════════════════════════════════
# #
# # Purpose: First-layer rate limiting using Cloudflare's native Rate Limiter binding
# # Benefits:
# #   - Ultra-low latency (<10ms, edge-based enforcement)
# #   - Works in both stateless (DB_MODE="") and stateful (DB_MODE set) modes
# #   - Zero database cost for stateless deployments
# #   - Can be used as additional protection layer when combined with DB rate limiting
# #
# # How it works:
# # 1. Request arrives → CF Rate Limiter checks (based on IP subnet SHA256)
# # 2. If limit exceeded → Return 429 immediately (no DB queries)
# # 3. If allowed → Continue to DB rate limiting (if DB_MODE set) or handle request
# #
# # Dual Protection (Stateful Mode):
# # - CF Rate Limiter: Blocks obvious abuse at edge (e.g., 10 req/10s)
# # - DB Rate Limiting: Fine-grained control (e.g., 100 req/24h)
# # - Advantages: CF absorbs high-frequency attacks, DB handles long-term limits
# #
# # Requirements:
# # - Must configure [[rate_limit]] binding in wrangler.toml (see below)
# # - ENABLE_CF_RATELIMITER must be "true" to activate
# # - Binding validation enforced at startup (throws error if binding not found)
# #
# # Configuration:
# ENABLE_CF_RATELIMITER = "false"      # Enable Cloudflare Rate Limiter binding
#                                       # Default: "false" (disabled)
#                                       # Set to "true" to enable first-layer rate limiting
#                                       # Works in both stateless and stateful modes
#                                       # If enabled but binding not found → startup error
#
# CF_RATELIMITER_BINDING = "CF_RATE_LIMITER"  # Rate Limiter binding name
#                                              # Default: "CF_RATE_LIMITER"
#                                              # Must match [[rate_limit]].binding below
#                                              # Change if using custom binding name
#
# # Limiting Key Strategy:
# # - Uses SHA256(IP subnet) as rate limiting key
# # - Respects IPV4_SUFFIX and IPV6_SUFFIX settings (same as DB rate limiting)
# # - Example: IPV4_SUFFIX="/24" → all IPs in 192.168.1.0/24 share the same limit
# #
# # Error Handling:
# # - Binding not found when enabled → Throws startup error
# # - Rate limit exceeded → Returns 429 with Retry-After: 60 header
# # - CF Rate Limiter failure → fail-open (continues to DB or handles request)
# #
# # Example Configuration (Stateless Mode):
# #   ENABLE_CF_RATELIMITER = "true"
# #   CF_RATELIMITER_BINDING = "CF_RATE_LIMITER"
# #   DB_MODE = ""  # No database, pure edge rate limiting
# #   IPV4_SUFFIX = "/24"
# #   IPV6_SUFFIX = "/60"
# #
# # Example Configuration (Stateful Dual Protection):
# #   ENABLE_CF_RATELIMITER = "true"
# #   CF_RATELIMITER_BINDING = "CF_RATE_LIMITER"
# #   DB_MODE = "custom-pg-rest"
# #   WINDOW_TIME = "24h"
# #   IPSUBNET_WINDOWTIME_LIMIT = "100"  # 100 requests per 24h (DB layer)
# #   # CF Rate Limiter configured in binding: 10 requests per 10s (edge layer)

# D1 Database Binding (for DB_MODE="d1")
# Uncomment and configure this section if using D1 binding mode
# [[d1_databases]]
# binding = "DB"  # Must match D1_DATABASE_BINDING env var (or use default "DB")
# database_name = "alist-cache-db"
# database_id = "your-d1-database-id"

# ═══════════════════════════════════════════════════════════════
# ⚠️ NEW: Cloudflare Rate Limiter Binding (for ENABLE_CF_RATELIMITER="true")
# ═══════════════════════════════════════════════════════════════
#
# Uncomment and configure this section if enabling CF Rate Limiter
# The rate limit rules (period, limit) are configured here, NOT in environment variables
# Documentation: https://developers.cloudflare.com/workers/runtime-apis/bindings/rate-limit/
#
# [[rate_limit]]
# binding = "CF_RATE_LIMITER"  # Must match CF_RATELIMITER_BINDING env var
#
# # Simple Algorithm (Fixed Window)
# # Example: 10 requests per 10 seconds
# simple = { period = 10, limit = 10 }
#
# # Alternative: Sliding Window Algorithm (More accurate)
# # Example: 100 requests per 60 seconds (sliding window)
# # sliding_window = { period = 60, limit = 100 }
#
# # Notes:
# # - period: Time window in seconds (max 86400 = 24h)
# # - limit: Maximum requests per period per key (IP subnet SHA256)
# # - Choose simple for lower latency, sliding_window for more accurate enforcement
# # - These parameters cannot be changed via environment variables
# # - Must redeploy worker to change rate limit rules
#
# # Recommended Configurations:
# #
# # Light Protection (Edge layer):
# #   simple = { period = 10, limit = 20 }
# #   # 20 requests per 10 seconds = ~2 req/s burst
# #
# # Medium Protection (Edge layer):
# #   simple = { period = 10, limit = 10 }
# #   # 10 requests per 10 seconds = 1 req/s sustained
# #
# # Heavy Protection (Edge + DB layer):
# #   simple = { period = 10, limit = 5 }
# #   # Edge: 5 req/10s, DB: 100 req/24h (configure in WINDOW_TIME/IPSUBNET_WINDOWTIME_LIMIT)

# For local development, create a .dev.vars file with:
# ADDRESS=https://your-alist-server.com
# TOKEN=your-hmac-token
# WORKER_ADDRESS=https://your-worker.workers.dev
